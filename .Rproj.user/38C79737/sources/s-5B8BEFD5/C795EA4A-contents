---
title: "in-class 08"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

For the setup of this, I have created a database called titanic. The goal will be to use this lab to work on the titanic dataset. The code below will let you connect to the database. Create a Markdown with the following code and work through the lab. 

```{R}
library(RMySQL)
con2 <- dbConnect(MySQL(),
                 user = 'trial',
                 password = 'password',
                 host = '127.0.0.1',
                 dbname='titanic')
```

We can run any of these commands as follow:

```
query <- "show tables;" # This will be your SQL command
dbGetQuery(con, query) # This sends the command to the SQL server
```


1. What tables are in this database?
```{r}
query <- "show tables;"  # This will be your SQL command
dbGetQuery(con2, query) # This sends the command to the SQL server
```

2. Load the titanic data:

```{r}
titanic <- read.table("/home/php2560/titanic.csv", header=TRUE, sep=",")
```

3. Create a table in MySQL from this data. Name it `titanic_yourlastname`:

```{r, eval = FALSE}
dbWriteTable(con2, "titanic_tu", titanic)
```

4. Now what tables are in this database?
```{r}
query <- "show tables;"  # This will be your SQL command
dbGetQuery(con2, query) # This sends the command to the SQL server
## there is one more tale that I just created
```



### Basic usage of commands

We will start to use a list of commands that would be commonly used in MySQL:

These are:

- show tables;
- describe titanic_yourlastname;
- select name, pclass, age, sex from titanic limit 10;
 




Try these commands and test this out. 


### R and MySQL

5. Run the following SQL command. Before doing so describe what this is asking
```
select pclass, survived, avg(age) as avg_age from titanic_yourlastname   
   group by pclass, survived;
```

```{r}
query <- "select pclass, survived, avg(age) as avg_age from titanic_yourlastname   
   group by pclass, survived;"  
dbGetQuery(con2, query) # This sends the command to the SQL server
## To check  average age of each pclass according to it is survived or not
```


6.  Run the following SQL command. Before doing so describe what this is asking
```
select pclass, survived, avg(age) as avg_age from titanic_yourlastname
   where survived=1
   group by pclass, survived;
```
```{r}
query <- "select pclass, survived, avg(age) as avg_age from titanic_yourlastname
   where survived=1
   group by pclass, survived;"  
dbGetQuery(con2, query) # This sends the command to the SQL server
## To check the average age of each pclass when they are survival. 
```

7. Run the following SQL command. Before doing so describe what this is asking
```
select name, pclass, survived, age from titanic_yourlastname 
   where name regexp '^.sen.+';
   ```
```{r}
query <- "select name, pclass, survived, age from titanic_yourlastname 
   where name regexp '^.sen.+';"
dbGetQuery(con2, query) # This sends the command to the SQL server
## To check the age, plcass and survival status for people whose name starts with one letter and follows by "sen"
```
8. Run the following SQL command. Before doing so describe what this is asking
```
select name, pclass, survived, age from titanic_tu 
   where name regexp 'Jakob.*$';
```
```{r}
query <- "select name, pclass, survived, age from titanic_yourlastname 
   where name regexp 'Jakob.*$';"
dbGetQuery(con2, query) # This sends the command to the SQL server
## To check the age, plcass and survival status whose name ends with "Jakob" or "Jakob" and some letters(characters) go after it.
```

9.  Run the following SQL commands. What is different about them? What do they return?
```
select name, pclass, survived, age from titanic_yourlastname 
   where name regexp 'Ivar.*$';
   ```
```{r}
query <- "select name, pclass, survived, age from titanic_yourlastname 
   where name regexp 'Ivar.*$';"
dbGetQuery(con2, query) # This sends the command to the SQL server
## To check the age, plcass and survival status whose name ends with "Ivar" or "Ivar" and some letters(characters) go after it where 'I' can be lower case or capital.
```
 
```
select name, pclass, survived, age from titanic_yourlastname 
   where name regexp ',.*Ivar.*$';
```
```{r}
query <- "select name, pclass, survived, age from titanic_yourlastname 
   where name regexp ',.*Ivar.*$';"
dbGetQuery(con2, query) # This sends the command to the SQL server
## To check the age, plcass and survival status whose name ends with "Ivar" or "Ivar" and some letters(characters) go after it where 'I' must be capital.
```


10. We can also plot data from this:
```{r}
myQuery <- "select pclass, avg(fare) as avg_fare from titanic_yourlastname
              group by pclass;"
myData <- dbGetQuery(con2, myQuery)
library(ggplot2)
ggplot(myData, aes(pclass, avg_fare)) + geom_bar(stat="identity")
```



### More challenging

11. Create a data frame with:
- `pclass`
- `sex`
- `age`
- `fare`
- `survived`
- `parch`
Only for people who did not survive. 
```{r}
query <- "select pclass, sex, age,fare,survived,parch from titanic_yourlastname 
   where survived = 0"
dbGetQuery(con2, query) # This sends the command to the SQL server
```


12. Create a graph of the average survival over the different classes. Make two distinct lines for male and female passengers. Create this plot using ggplot. 
```{r}
myQuery <- "select pclass, avg(survived) as averag_survived ,sex from titanic_tu              group by pclass, sex;"
myData <- dbGetQuery(con2, myQuery)
library(ggplot2)
ggplot(myData, aes(x=pclass, y=averag_survived,color=sex)) + geom_line()
```
